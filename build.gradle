buildscript {
    ext {
        springBootVersion = '2.1.5.RELEASE'
    }
    repositories {
        mavenCentral()
    }
    dependencies {
        classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}")
    }
}

plugins {
    id "org.sonarqube" version "2.7"
}
apply plugin: 'java'
apply plugin: 'eclipse'
apply plugin: 'org.springframework.boot'
apply plugin: 'io.spring.dependency-management'
apply plugin: 'jacoco'

group = 'com.evergarden.cms'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = 1.8

repositories {
    mavenCentral()
    maven {url 'https://jitpack.io'}
}

configurations {
    developmentOnly
    runtimeClasspath {
        extendsFrom developmentOnly
    }
}

sonarqube {
    properties {
        property "sonar.projectName", "Evergarden Core"
        property "sonar.projectKey", "Evergarden"
    }
}

jacocoTestReport {
    reports {
        xml.enabled true
        html.enabled false
    }
}

test {
    useJUnitPlatform()
    testLogging {
        events "passed", "skipped", "failed"
        exceptionFormat "full"
    }
    finalizedBy jacocoTestReport
}

task codeCoverageReport(type: JacocoReport) {
    executionData fileTree(project.rootDir.absolutePath).include("**/build/jacoco/*.exec")
    
    reports {
        xml.enabled = true
        xml.setDestination(new File("${buildDir}/reports/jacoco/report.xml"))
    }

    classDirectories = fileTree(dir: 'build/classes/main')
    sourceDirectories = fileTree(dir: 'scr/main/java')
}

dependencies {
    // Eureka client
    // compile 'org.springframework.cloud:spring-cloud-starter-netflix-eureka-client'

    //jooq sql lib
    compile group: 'org.jooq', name: 'jooq', version: '3.11.10'

    //sdk
    implementation 'com.github.GostShell:sdk:v0.0.3.6-alpha'

    //rxjava-jdbc
    compile 'com.github.davidmoten:rxjava2-jdbc:0.2.4'

    // Reactor Adapter (RxJava2, Akka Actors scheduler and more)
    compile "io.projectreactor.addons:reactor-adapter:3.2.0.RELEASE"

    //data db
    compile("com.h2database:h2:1.4.197") // or developmentOnly

    // jwt lib
    compile 'com.auth0:java-jwt:3.6.0'

    //dev devtools
    developmentOnly("org.springframework.boot:spring-boot-devtools") //runtimeOnly ??

    // sugar syntax and helper
    compile 'org.projectlombok:lombok:1.18.4'

    //spring web-flux
    implementation 'org.springframework.boot:spring-boot-starter-webflux'
    implementation("org.springframework.boot:spring-boot-starter-data-jpa")
    implementation("org.springframework.boot:spring-boot-starter-security")

    testImplementation('org.springframework.boot:spring-boot-starter-test')
    //testImplementation('org.springframework.security:spring-security-test')
    testImplementation('io.projectreactor:reactor-test')

    //junit test
    //testCompile group: 'junit', name: 'junit', version: '4.12'
    
    // mockito
    testCompile group: 'org.mockito', name: 'mockito-core', version: '2.24.0'

    // https://mvnrepository.com/artifact/org.junit.jupiter/junit-jupiter-api
    testCompile group: 'org.junit.jupiter', name: 'junit-jupiter-api', version: '5.3.2'

    /**
     * JUnit Jupiter parameter configuration.
     */
    testCompile group: 'org.junit.jupiter', name: 'junit-jupiter-params', version: '5.3.2'

    /**
     * JUnit Jupiter testing engine.
     */
    testCompile group: 'org.junit.jupiter', name: 'junit-jupiter-engine', version: '5.3.2'

    /**
     * Vintage platform engine.
     */
    testCompile group: 'org.junit.platform', name: 'junit-platform-engine', version: '1.3.2'


    // Integrate flyway for database migration version control
    compile "org.flywaydb:flyway-core:5.2.4"

    // https://mvnrepository.com/artifact/org.apache.commons/commons-lang3
    compile group: 'org.apache.commons', name: 'commons-lang3', version: '3.9'

    // Integrate spring shell or crash
    // Use neo4j to manage taxonomy system
    // Use elastic search to provide a search system embedded engine https://github.com/allegro/embedded-elasticsearch
    // For caching Ehcache JSR-107 “JCache” API or see https://spring.io/guides/gs/caching/
    // test integration w<ith flyway https://github.com/flyway/flyway-test-extensions/wiki/Usage-flyway-spring-test
}

//	        			from spring initializr

// implementation('org.springframework.boot:spring-boot-starter-web')
// runtimeOnly('org.springframework.boot:spring-boot-devtools')
// runtimeOnly('com.h2database:h2')
// testImplementation('org.springframework.boot:spring-boot-starter-test')
// testImplementation('io.projectreactor:reactor-test')


//dependencyManagement {
//    imports {
//        mavenBom 'org.springframework.cloud:spring-cloud-dependencies:Finchley.SR2'
//    }
//}